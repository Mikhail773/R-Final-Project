install.packages("tidyverse")
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
library(gapminder)
library(Lahman)
library(nycflights13)
mydata <- read.csv("C:\\Users\\vener\\OneDrive\\Documents\\University at Brockport\\Class Content\\2021 - Spring\\Data Analysis and Predictive Modeling\\Labs\\Lab03\\Lab03\\Lab4_ZipCard_Data.csv")
View(mydata)
View(mydata)
unknowngender <- subset( mydata, GENDER==Unknown)
unknowngender <- subset( mydata, GENDER=="Unknown")
malefemale <- (mydata - unkowngender)
malefemale <- (mydata - unknowngender)
View(unknowngender)
malefemale <- subset( mydata, GENDER!="Unknown")
average(malefemale, TRANSACTION_AMOUNT, GENDER="Male")
library(tidyverse)
average(malefemale, TRANSACTION_AMOUNT, GENDER="Male")
library(dplyr)
average(malefemale, TRANSACTION_AMOUNT, GENDER="Male")
mean(malefemale, TRANSACTION_AMOUNT, GENDER="Male")
mean(malefemale, malefemale$TRANSACTION_AMOUNT, GENDER="Male")
mean(malefemale, malefemale$TRANSACTION_AMOUNT, malefemale$GENDER="Male")
mean(malefemale, malefemale$TRANSACTION_AMOUNT, malefemale$GENDER=="Male")
mean(malefemale, TRANSACTION_AMOUNT, GENDER=="Male")
mean(TRANSACTION_AMOUNT, subset(malefemale, GENDER=="Male")
)
mean(TRANSACTION_AMOUNT, subset(malefemale, GENDER=="Male"))
mean($TRANSACTION_AMOUNT, subset(malefemale, GENDER=="Male"))
mean(TRANSACTION_AMOUNT, subset(malefemale, GENDER=="Male"))
mean(TRANSACTION_AMOUNT, subset(malefemale, GENDER=="Male"))
average
mean(malefemale$TRANSACTION_AMOUNT, subset(malefemale, GENDER=="Male"))
mean(malefemale$TRANSACTION_AMOUNT)
mean(subset(malefemale$TRANSACTION_AMOUNT, GENDER=="male")
)
mean(subset(malefemale$TRANSACTION_AMOUNT, malefemale$GENDER=="male")
)
mean(subset(malefemale$TRANSACTION_AMOUNT, malefemale$GENDER=="male"))
mean(subset(malefemale$TRANSACTION_AMOUNT, malefemale$GENDER=="male"))
mean(subset(malefemale$$GENDER=="male")$TRANSACTION_AMOUNT)
mean(subset(malefemale$GENDER=="male")$TRANSACTION_AMOUNT)
mean(subset(malefemale, malefemale$GENDER=="male")$TRANSACTION_AMOUNT)
subset(malefemale, malefemale$GENDER=="male")$TRANSACTION_AMOUNT
sum(malefemale, malefemale$GENDER=="male")$TRANSACTION_AMOUNT
subset(malefemale, malefemale$GENDER=="male")$TRANSACTION_AMOUNT
subset(malefemale, malefemale$GENDER=="male")
subset(malefemale, malefemale$GENDER=="Male")$TRANSACTION_AMOUNT
mean(subset(malefemale$$GENDER=="Male")$TRANSACTION_AMOUNT)
mean(subset(malefemale$GENDER=="Male")$TRANSACTION_AMOUNT)
mean(subset(malefemale, malefemale$GENDER=="Male")$TRANSACTION_AMOUNT)
mean(subset(malefemale, malefemale$GENDER=="Female")$TRANSACTION_AMOUNT)
d <- with (malefemale, TRANSACTION_AMOUNT[GENDER=="Male"] - TRANSACTION_AMOUNT[GENDER=="Female"])
d <- with (malefemale, TRANSACTION_AMOUNT[GENDER=="Female"] - TRANSACTION_AMOUNT[GENDER=="Male"])
d <- with (malefemale, TRANSACTION_AMOUNT[GENDER=="Male"] - TRANSACTION_AMOUNT[GENDER=="Female"])
shapiro.text(d)
shapiro.test(d)
res <- t.test(TRANSACTION_AMOUNT ~ GENDER, data = malefemale, var.equal = TRUE)
res
View(malefemale)
View(malefemale)
View(malefemale)
SUNYBrockport <- subset(malefemale, ACAD_ORG=="SUNY at Brockport")
subset(malefemale, ACAD_ORG=="SUNY*")
subset(malefemale, ACAD_ORG==SUNY*)
ColBusAdm <- subset(malefemale, ACAD_ORG=="College of Business Administration")
ColEd <- subset(malefemale, ACAD_ORG=="College of Education")
ColEng <- subset(malefemale, ACAD_ORG=="College of Engineering")
ColHlthProf <- subset(malefemale, ACAD_ORG=="College of Health Professions")
#Load the libraries needed for the project
library(dplyr)
library(tidyverse)
mydata <- read.csv("C:\\Users\\vener\\OneDrive\\Documents\\University at Brockport\\Class Content\\2021 - Spring\\Data Analysis and Predictive Modeling\\Labs\\Lab03\\Lab03\\Lab4_ZipCard_Data.csv")
malefemale <- subset(mydata, mydata$GENDER != "Unknown")
mean(subset(malefemale, malefemale$GENDER=="Male")$TRANSACTION_AMOUNT)
mean(subset(malefemale, malefemale$GENDER=="Female")$TRANSACTION_AMOUNT)
res <- t.test(TRANSACTION_AMOUNT ~ GENDER, data = malefemale, var.equal = TRUE)
res
#SUNY at Brockport (4628)
ColSuny <- subset(malefemale, ACAD_ORG=="SUNY at Brockport")
#College of Business Administration (1959)
ColBusAdm <- subset(malefemale, ACAD_ORG=="College of Business Administration")
#College of Education (2091)
ColEd <- subset(malefemale, ACAD_ORG=="College of Education")
#College of Engineering (1858)
ColEng <- subset(malefemale, ACAD_ORG=="College of Engineering")
#College of Health Professions (1758)
ColHlthProf <- subset(malefemale, ACAD_ORG=="College of Health Professions")
#HEALTH PROFESSIONS
#Variables that hold the male and female true and false values
totalMsum <- (ColHlthProf$GENDER == "Male")
totalFeSum <- (ColHlthProf$GENDER == "Female")
#variables that hold the total number of times male and female occurs
totalMsumCount <- sum(totalMsum)
totalFesumCount <- sum(totalFeSum)
#making a table with the number of Males, Females, and total
ColHlthTB <- rbind(Male = as.numeric(c(totalMsumCount)),
Female = as.numeric(c(totalFesumCount)),
Total =as.numeric( c(sum(totalMsum, totalFeSum))))
#Running chisquare test with our table as an input
chisq.test(ColHlthTB)
#SUNY AT BROCKPORT
#Variables that hold the male and female true and false values
totalMsum <- (ColSuny$GENDER == "Male")
totalFeSum <- (ColSuny$GENDER == "Female")
#variables that hold the total number of times male and female occurs
totalMsumCount <- sum(totalMsum)
totalFesumCount <- sum(totalFeSum)
#making a table with the number of Males, Females, and total
ColSunyTB <- rbind(Male = as.numeric(c(totalMsumCount)),
Female = as.numeric(c(totalFesumCount)),
Total =as.numeric( c(sum(totalMsum, totalFeSum))))
#Running chisquare test with our table as an input
chisq.test(ColSunyTB)
#BUSINESS ADMINISTRATION
#Variables that hold the male and female true and false values
totalMsum <- (ColBusAdm$GENDER == "Male")
totalFeSum <- (ColBusAdm$GENDER == "Female")
#variables that hold the total number of times male and female occurs
totalMsumCount <- sum(totalMsum)
totalFesumCount <- sum(totalFeSum)
#making a table with the number of Males, Females, and total
ColSunyTB <- rbind(Male = as.numeric(c(totalMsumCount)),
Female = as.numeric(c(totalFesumCount)),
Total =as.numeric( c(sum(totalMsum, totalFeSum))))
#Running chisquare test with our table as an input
chisq.test(ColSunyTB)
#EDUCATION
#Variables that hold the male and female true and false values
totalMsum <- (ColEd$GENDER == "Male")
totalFeSum <- (ColEd$GENDER == "Female")
#variables that hold the total number of times male and female occurs
totalMsumCount <- sum(totalMsum)
totalFesumCount <- sum(totalFeSum)
#making a table with the number of Males, Females, and total
ColSunyTB <- rbind(Male = as.numeric(c(totalMsumCount)),
Female = as.numeric(c(totalFesumCount)),
Total =as.numeric( c(sum(totalMsum, totalFeSum))))
#Running chisquare test with our table as an input
chisq.test(ColSunyTB)
#ENGINEERING
#Variables that hold the male and female true and false values
totalMsum <- (ColEng$GENDER == "Male")
totalFeSum <- (ColEng$GENDER == "Female")
#variables that hold the total number of times male and female occurs
totalMsumCount <- sum(totalMsum)
totalFesumCount <- sum(totalFeSum)
#making a table with the number of Males, Females, and total
ColSunyTB <- rbind(Male = as.numeric(c(totalMsumCount)),
Female = as.numeric(c(totalFesumCount)),
Total =as.numeric( c(sum(totalMsum, totalFeSum))))
#Running chisquare test with our table as an input
chisq.test(ColSunyTB)
#Getting subsets of malefemale, and storing the acadlevel in different variables
ColFresh <- subset(malefemale, ACAD_LEVEL=="Feshmen")
ColSoph <- subset(malefemale, ACAD_LEVEL=="Sophomore")
ColJun <- subset(malefemale, ACAD_LEVEL=="Junior")
ColSen <- subset(malefemale, ACAD_LEVEL=="Senior")
View(ColSoph)
ACAD_LEVEL.aov < -(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <-(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <-(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <- (TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <- (TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <- (TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <- aov(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov
TukeyHSD(ACAD_LEVEL.aov)
View(ColSen)
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshmen"|"sophmore"|"Junior"|"Senior")
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshmen"|ACAD_LEVEL =="Sophmore"|ACAD_LEVEL =="Junior"|ACAD_LEVEL =="Senior")
View(ColFreshSophJunSen)
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshmen"|ACAD_LEVEL =="Sophmore"|ACAD_LEVEL =="Junior"|ACAD_LEVEL =="Senior")
#Compute one-way anova of Transaction amount by Acad level
ACAD_LEVEL.aov <- aov(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=ColFreshSophJunSen)
#Display results of AOV
ACAD_LEVEL.aov
#Perform Tukey Analysis
TukeyHSD(ACAD_LEVEL.aov)
View(ColFreshSophJunSen)
View(malefemale)
#Getting subsets of malefemale, Where Avad level is Freshman, Sophomore, Junior, or Senior
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshman"|ACAD_LEVEL =="Sophomore"|ACAD_LEVEL =="Junior"|ACAD_LEVEL =="Senior")
#Compute one-way anova of Transaction amount by Acad level
ACAD_LEVEL.aov <- aov(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=ColFreshSophJunSen)
#Display results of AOV
ACAD_LEVEL.aov
#Perform Tukey Analysis
TukeyHSD(ACAD_LEVEL.aov)
#Display results of AOV
ACAD_LEVEL.aov
#Display results of AOV
summary(ACAD_LEVEL.aov)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD ~ GENDER + AGE ~ GENDER, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD ~ GENDER + AGE ~ GENDER, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD + AGE ~ GENDER, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD ~ GENDER + AGE, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(GENDER ~ ACAD_LEVEL + AGE, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD + AGE ~ GENDER, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(GENDER ~ ACAD_LOAD + AGE , data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(AGE ~ ACAD_LOAD + GENDER , data=malefemale)
summary(ACAD_LOAD.aov2)
#Perform Tukey Analysis
summary(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TUKEY(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TUKEYHSD(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TukeyHSD(ACAD_LOAD.aov2)
#Getting subsets of malefemale, Where Acad level is Freshman, Sophomore, Junior, or Senior
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshman"|ACAD_LEVEL =="Sophomore"|ACAD_LEVEL =="Junior"|ACAD_LEVEL =="Senior")
#Compute one-way anova of Transaction amount by Acad level
ACAD_LEVEL.aov <- aov(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=ColFreshSophJunSen)
#Display results of AOV
summary(ACAD_LEVEL.aov)
#Perform Tukey Analysis
TukeyHSD(ACAD_LEVEL.aov)
#Getting subsets of malefemale, Where Acad load is Enrolled Full-Time, Three Quarter Time, Enrolled Half-Time
ColACADLOAD <- subset(malefemale, ACAD_LOAD =="Enrolled Full-Time"|ACAD_LOAD =="Three Quarter Time"|ACAD_LOAD =="Enrolled Half-Time")
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(AGE ~ ACAD_LOAD + GENDER , data=ColACADLOAD)
summary(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TukeyHSD(ACAD_LOAD.aov2)
#Computer two-way avova of Acad Load and Age on Gender
ACAD_LOAD.aov2 <- aov(GENDER ~ ACAD_LOAD + AGE , data=ColACADLOAD)
#Computer two-way avova of Acad Load and Age on Gender
ACAD_LOAD.aov2 <- aov(AGE ~ GENDER + ACAD_LOAD, data=ColACADLOAD)
summary(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TukeyHSD(ACAD_LOAD.aov2)
# Clear plots
dev.off()
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")
setwd("~/University at Brockport/Class Content/2021 - Spring/Data Analysis and Predictive Modeling/Project/Git")
#Import all the library's we are using
library(tidyverse)
library(e1071) #SVM
library(car) #predict
library(Metrics) #rmse
library(caret) #partiiton
library(MASS) #stepwise
library(kernlab) #SVM
library(rpart) # Decision Tree Regression
library(randomForest) #  Random Forest Tree Regression
library(ranger) # RFT more than 53 factors
#Read our dataset into the cars variable
cars <- read_csv("cars.csv")
View(cars) #view the data
#Removing unnecessary columns from cars. Store that data in cars_edited
# -(19) is a column that shows the number of times a car has been upped. This column not descriptive and has been removed
# -(20:29) are boolean columns for various features. There is no description of what these features are and for that reason they have been omitted.
cars_edited <- cars %>% dplyr::select(-8 & -(12:13) & -(20:29))
View(cars_edited) #view the data
# Recode foreign language into their English meaning (engine_fuel)
cars_edited <- cars_edited %>% mutate(engine_fuel = dplyr::recode(engine_fuel,'gas' = "compressed natural gas"))
# Check the na's in the dataset
colSums(is.na(cars))
# Lets arbitrarily pick 999 to denote NA. (Engine-Capacity is categorical so this can be done)
cars_edited <-
cars_edited %>% mutate(engine_capacity = coalesce(engine_capacity, 999))
# Check for Duplicates and remove them
which(duplicated(cars_edited))
cars_edited <- cars_edited %>% distinct()
# View the changes the mutate made
View(cars_edited)
#Change model_name to factor. Useful later on for prediction modeling
str(cars_edited)
cars_edited$model_name <- as.factor(cars_edited$model_name)
cars_edited$engine_fuel <- as.factor(cars_edited$engine_fuel)
###################################################################################################
#
# Split Dataset into Training and Testing for our Models
#
set.seed(123)
training.samples <- cars_edited$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- cars_edited[training.samples,]
test.data <- cars_edited[-training.samples,]
View(train.data)
View(test.data)
# 1) Getting the unique entries for all columns and displaying how often they appear
ggplot(cars_edited, mapping = aes(y = manufacturer_name)) + geom_histogram(stat ="count") + geom_text(stat = "count", aes(label = after_stat(count)), hjust = -1)
# 2) A table to show unique car model names and how many there are
View(cars_edited %>% count(model_name))
# 3) Plotting the number of cars with automatic or mechanical transmissions
ggplot(cars_edited, mapping = aes(x = transmission)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 4) Plotting cars by color and how many there are
ggplot(cars_edited, mapping = aes(x = color)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 5) Box plot Odometer Value: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(odometer_value))
# 6) Histogram Odometer Value: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(odometer_value))
# 7) A table to show unique years produced for cars, and how many there are
View(cars_edited %>% count(year_produced))
# 8) Box plot year produced: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(year_produced))
# 9) Histogram Year produced: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(year_produced))
# 10) Graph to show what cars use what engine type (type of fuel)
ggplot(cars_edited, aes(x = engine_fuel), stat = "count") + geom_bar(mapping = aes(fill = engine_type))  + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 11) graph to show engine type (Electric, Diesel, Gasoline)
ggplot(cars_edited, aes(x = engine_type), stat = "count") + geom_bar()  + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 12) A table to show unique engine types and how many there are
View(cars_edited %>% count(engine_capacity))
# 13) Box plot Engine capacity: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(engine_capacity))
# 14) Bar graph Engine capacity: Graph to see how the data is skewed
ggplot(cars_edited) + geom_bar(mapping = aes(engine_capacity))
# 15) Bar graph Body type: count how many cars have the same body type
ggplot(cars_edited, mapping = aes(x = body_type), stat = "count") + geom_bar() + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 16) Bar graph Drive train: How many cars have certain drive trains
ggplot(cars_edited, mapping = aes(x = drivetrain), stat = "count") + geom_bar() + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 17) Number of cars with same price
View(cars_edited %>% count(price_usd))
# 18) Box plot Price USD: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(price_usd))
# 19) Histogram Price USD: Check to see how skewed the data is
ggplot(cars_edited) + geom_histogram(mapping = aes(price_usd))
# 20) Bar graph Is exchangeable: Counting the number of cars that are exchangeable
ggplot(cars_edited, mapping = aes(x = is_exchangeable)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 21) Bar graph Location region: Count the number of cars in a region
ggplot(cars_edited, mapping = aes(x = location_region)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 22) View: posts with number of photos per car
View(cars_edited %>% count(number_of_photos))
# 23) Box plot Number of photos: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(number_of_photos))
# 24) Histogram Number of photos: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(number_of_photos))
# 25) View Up counter: The count unique up time for each car
View(cars_edited %>% count(up_counter))
# 26) Box plot Up counter: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(up_counter))
# 27) Histogram Up counter: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(up_counter))
# 28) View Duration listed: The count of unique Duration listed for each car
View(cars_edited %>% count(duration_listed))
# 29) Box plot Duration listed: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(duration_listed))
# 30) Histogram Duration listed: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(duration_listed))
# 1) Graph to show the amount of cars(by manufacturer name) in a region BALLOON PLOT
ggplot(cars_edited, aes(location_region, manufacturer_name)) + geom_count()
# 2) Graph to show the price of a car according to its year produced SCATTER PLOT
ggplot(cars_edited, aes(year_produced, price_usd)) + geom_point() + geom_smooth()
# 3) Graph to show the amount of cars(density) according to it's price LINE GRAPH
ggplot(cars_edited, aes(price_usd, ..density..)) + geom_freqpoly(binwidth = 500)
#Group cars by manufacturer, and get it's mean price
cars_edited %>% group_by(manufacturer_name) %>% summarize(mean(price_usd)) %>% View()
# 4) Graph to show the number of cars in specific colors(10 red cars, 8 blue cars etc.) by region BAR GRAPH
ggplot(cars_edited, aes(color)) + geom_bar(aes(fill = location_region))
# 5) Graph to show the price of a car according to it's millage(odometer) SCATTER PLOT
ggplot(cars_edited, aes(odometer_value, price_usd)) + geom_point(aes(color = is_exchangeable)) + geom_smooth()
# 6)Graph to show the price of a car according to it's year produced AND body type SCATTER PLOT
ggplot(cars_edited, aes(year_produced, price_usd)) + geom_point(aes(color = body_type)) + geom_smooth()
# 7) Graph to show the price of a car according to it's Odometer AND engine fuel SCATTER PLOT
ggplot(cars_edited, mapping = aes(x = odometer_value, y = price_usd)) + geom_point() + geom_smooth()
# Group by car body type and get it's mean price
group_by(cars_edited, body_type) %>% summarise(price_mean = mean(price_usd)) -> mean_cars
# 8) Graph to show the outliers with body type and price BOX PLOT
ggplot(cars_edited) + geom_boxplot(mapping = aes(x = reorder(body_type, price_usd), y =
price_usd))
# 9) Graph to show the correlation between car body type, price, AND engine fuel
ggplot(cars_edited) + geom_point(mapping = aes(x = body_type, y = price_usd, color = engine_fuel))
# 10 ) Graph to show the price of a car according to it's number of photos incl. engine fuel SCATTER PLOT
ggplot(cars_edited) + geom_point(mapping = aes(x = number_of_photos, y = price_usd, color = engine_fuel))
random_forest_ranger <- train(price_usd ~ . ,
data = train.data,
method = "ranger",
trControl = trainControl("cv", number = 10),
preProcess = c("center","scale"),
tuneLength = 10
)
summary(random_forest_ranger)
#r.squared                     1  -none-        numeric
#call                          9  -none-        call
#importance.mode               1  -none-        character
#num.samples                   1  -none-        numeric
#replace                       1  -none-        logical
#xNames                     1215  -none-        character
#problemType                   1  -none-        character
#tuneValue                     3  data.frame    list
#obsLevels                     1  -none-        logical
#param                         0  -none-        list
random_forest_ranger$bestTune
#   mtry  splitrule min.node.size
#20 1215 extratrees             5
plot(random_forest_ranger)
# Plot the final tree model
par(xpd = NA) # Avoid clipping the text in some device
plot(random_forest_ranger$finalModel)
text(random_forest_ranger$finalModel, digits = 3)
View(random_forest_ranger)
# Make predictions on the test data
rf_predict_ranger <- predict(random_forest_ranger, test.data , type='response')
# Make predictions on the test data
#rf_predict_ranger <- predict(random_forest_ranger, test.data , type='response')
rf_predict_ranger <- predict(random_forest_ranger, test.data)
# Prediction error, rmse
RMSE(rf_predict_ranger,test.data$price_usd)
# Compute R-square
R2(rf_predict_ranger,test.data$price_usd)
# Make predictions on the test data
rf_predict_ranger <- predict(random_forest_ranger, test.data , type='response')
# Make predictions on the test data
rf_predict_ranger <- predict(random_forest_ranger, test.data , type="response")
# Make predictions on the test data
rf_predict_ranger <- predict(random_forest_ranger, test.data , type="response")
# Make predictions on the test data
rf_predict_ranger <- predict(random_forest_ranger, test.data , type='response')
# Make predictions on the test data
rf_predict_ranger <- predict(random_forest_ranger, test.data , type='raw')
# Prediction error, rmse
RMSE(rf_predict_ranger,test.data$price_usd)
# Compute R-square
R2(rf_predict_ranger,test.data$price_usd)
# Make predictions on the test data, prob
rf_predict_ranger <- predict(random_forest_ranger, test.data , type='prob')
# Make predictions on the test data
rf_predict_ranger <- predict(random_forest_ranger, test.data)
# Prediction error, rmse
RMSE(rf_predict_ranger,test.data$price_usd)
# Compute R-square
R2(rf_predict_ranger,test.data$price_usd)
# Plot the final tree model
par(xpd = NA) # Avoid clipping the text in some device
plot(random_forest_ranger$finalModel)
text(random_forest_ranger$finalModel, digits = 3)
random_forest_ranger::getTree
getTree(random_forest_ranger)
getTree(random_forest_ranger$finalModel)
plot(getTree(random_forest_ranger$finalModel))
lot(getTree(random_forest_ranger$finalModel)
)
getTree(random_forest_ranger$finalModel)
random_forest_ranger$finalModel
#Number of trees:                  500
#Sample size:                      30815
#Number of independent variables:  1215
#Mtry:                             1215
#Target node size:                 5
#Variable importance mode:         none
#Splitrule:                        extratrees
#Number of random splits:          1
#OOB prediction error (MSE):       3137444
#R squared (OOB):                  0.9233405
summary(random_forest_ranger$finalModel)
plot(random_forest_ranger$finalModel$forest)
plot(random_forest_ranger$finalModel$forest$treetype)
View(random_forest_ranger)
View(random_forest_ranger)
write.csv2(random_forest_ranger, file = "random_forest_ranger.csv2")
View(random_forest_ranger)
summary(random_forest_ranger)
summary(random_forest_ranger)
#r.squared                     1  -none-        numeric
#call                          9  -none-        call
#importance.mode               1  -none-        character
#num.samples                   1  -none-        numeric
#replace                       1  -none-        logical
#xNames                     1215  -none-        character
#problemType                   1  -none-        character
#tuneValue                     3  data.frame    list
#obsLevels                     1  -none-        logical
#param                         0  -none-        list
random_forest_ranger$bestTune
#   mtry  splitrule min.node.size
#20 1215 extratrees             5
plot(random_forest_ranger)
random_forest_ranger$finalModel
# Make predictions on the test data
rf_predict_ranger <- predict(random_forest_ranger, test.data)
# Prediction error, rmse
RMSE(rf_predict_ranger,test.data$price_usd)
# Compute R-square
R2(rf_predict_ranger,test.data$price_usd)
# Clear plots
dev.off()
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")
