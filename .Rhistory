# DataSet with all outliers removed entirely
# List of Outliers for every Continuous Variable
my_list <- map(Cars_continuous, Outlier_List_Values)
Outlier_List_Values <- function(df) {
outliers <- boxplot(df, plot = FALSE)$out
}
# DataSet with all outliers removed entirely
# List of Outliers for every Continuous Variable
my_list <- map(Cars_continuous, Outlier_List_Values)
# DataSet with all outliers removed entirely
# List of Outliers for every Continuous Variable
my_list <- map(Cars_continuous, Outlier_List_Values)
View(my_list)
setwd("~/Documents/GitHub/R-Final-Project")
#Import all the library's we are using
library(tidyverse)
library(e1071) #SVM
library(car) #predict
library(Metrics) #rmse
library(caret) #partiiton
library(MASS) #stepwise
library(kernlab) #SVM
library(rpart) # Decision Tree Regression
library(randomForest) #  Random Forest Tree Regression
library(ranger) # RFT more than 53 factors
#Removing unnecessary columns from cars. Store that data in cars_edited
# -(19) is a column that shows the number of times a car has been upped. This column not descriptive and has been removed
# -(20:29) are boolean columns for various features. There is no description of what these features are and for that reason they have been omitted.
cars_edited <- cars %>% dplyr::select(-8 & -(12:13) & -(20:29))
View(cars_edited) #view the data
# Check the na's in the dataset
colSums(is.na(cars))
# Check for Duplicates and remove them
which(duplicated(cars_edited))
cars_edited <- cars_edited %>% distinct()
#Change model_name to factor. Useful later on for prediction modeling
str(cars_edited)
cars_edited$model_name <- as.factor(cars_edited$model_name)
cars_edited$engine_fuel <- as.factor(cars_edited$engine_fuel)
training.samples <- cars_edited$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
#Read our dataset into the cars variable
cars <- read_csv("cars.csv")
# Recode foreign language into their English meaning (engine_fuel)
cars_edited <- cars_edited %>% mutate(engine_fuel = dplyr::recode(engine_fuel,'gas' = "compressed natural gas"))
# Lets arbitrarily pick 999 to denote NA. (Engine-Capacity is categorical so this can be done)
cars_edited <-
cars_edited %>% mutate(engine_capacity = coalesce(engine_capacity, 999))
# View the changes the mutate made
View(cars_edited)
###################################################################################################
#
# Split Dataset into Training and Testing for our Models
#
set.seed(123)
train.data <- cars_edited[training.samples,]
###################################################################################################
#
# Split Dataset into Training and Testing for our Models
#
set.seed(123)
training.samples <- cars_edited$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
# Lets arbitrarily pick 999 to denote NA. (Engine-Capacity is categorical so this can be done)
cars_edited <-
cars_edited %>% mutate(engine_capacity = coalesce(engine_capacity, 999))
# Recode foreign language into their English meaning (engine_fuel)
cars_edited <- cars_edited %>% mutate(engine_fuel = dplyr::recode(engine_fuel,'gas' = "compressed natural gas"))
#Removing unnecessary columns from cars. Store that data in cars_edited
# -(19) is a column that shows the number of times a car has been upped. This column not descriptive and has been removed
# -(20:29) are boolean columns for various features. There is no description of what these features are and for that reason they have been omitted.
cars_edited <- cars %>% dplyr::select(-8 & -(12:13) & -(20:29))
View(cars_edited) #view the data
# Recode foreign language into their English meaning (engine_fuel)
cars_edited <- cars_edited %>% mutate(engine_fuel = dplyr::recode(engine_fuel,'gas' = "compressed natural gas"))
# Check the na's in the dataset
colSums(is.na(cars))
# Lets arbitrarily pick 999 to denote NA. (Engine-Capacity is categorical so this can be done)
cars_edited <-
cars_edited %>% mutate(engine_capacity = coalesce(engine_capacity, 999))
# Check for Duplicates and remove them
which(duplicated(cars_edited))
cars_edited <- cars_edited %>% distinct()
#Change model_name to factor. Useful later on for prediction modeling
str(cars_edited)
cars_edited$model_name <- as.factor(cars_edited$model_name)
# View the changes the mutate made
View(cars_edited)
cars_edited$engine_fuel <- as.factor(cars_edited$engine_fuel)
###################################################################################################
#
# Split Dataset into Training and Testing for our Models
#
set.seed(123)
training.samples <- cars_edited$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- cars_edited[training.samples,]
test.data <- cars_edited[-training.samples,]
observed.price_usd <- test.data$price_usd
###################################################################################################
## SVR Models
model_count <- cars_edited %>% count(model_name)
single_model_occurances <- model_count %>% filter(n == 1)
single_model_occurances_list <- as.list(single_model_occurances[1])
cars_edited_models <- cars_edited[!cars_edited$model_name %in% single_model_occurances_list, ]
View(cars_edited_models)
# Remove models that only occur once
single_model_occurances_list
Outlier_List_Values <- function(df) {
outliers <- boxplot(df, plot = FALSE)$out
}
# DataSet with all outliers removed entirely
# List of Outliers for every Continuous Variable
my_list <- map(Cars_continuous, Outlier_List_Values)
#Show the outlier indexes and values of each continuous variable
Cars_continuous <- select(cars_edited, 5 | 6 | 12 | 15:17)
#Show the outlier indexes and values of each continuous variable
Cars_continuous <- dplyr::select(cars_edited, 5 | 6 | 12 | 15:17)
# DataSet with all outliers removed entirely
# List of Outliers for every Continuous Variable
my_list <- map(Cars_continuous, Outlier_List_Values)
View(my_list)
cars_edited_models <- cars_edited[!cars_edited$model_name %in% single_model_occurances_list[[1]], ]
View(cars_edited_models)
cars_edited %>% count(model_name) %>% View()
cars_edited_models %>% count(model_name) %>% View()
# Make another train and test set
training2.samples <- cars_edited_models$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
train2.data <- cars_edited_models[training.samples,]
test2.data <- cars_edited_models[-training.samples,]
### Linear SVR
modelSVMLinCont <- train( price_usd ~
odometer_value
+ year_produced
+ number_of_photos
+ duration_listed
+ up_counter, data = train2.data, method = "svmLinear",
trControl = trainControl("cv", number =10),
preProcess = c("center", "scale"),
tuneLength = 10
)
### Linear SVR
modelSVMLinCont <- train( price_usd ~
odometer_value
+ year_produced
+ number_of_photos
+ duration_listed
+ up_counter, data = train2.data, method = "svmLinear",
trControl = trainControl("cv", number =10),
preProcess = c("center", "scale"),
tuneLength = 10
)
View(train2.data)
View(cars_edited_models)
# Make another train and test set
training2.samples <- cars_edited_models$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
train2.data <- cars_edited_models[training.samples,]
test2.data <- cars_edited_models[-training.samples,]
View(train2.data)
# Make another train and test set
training2.samples <- cars_edited_models$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
train2 <- cars_edited_models[training.samples,]
test2 <- cars_edited_models[-training.samples,]
cars_edited_models <- cars_edited[!cars_edited$model_name %in% single_model_occurances_list[[1]], ]
View(cars_edited_models)
# Make another train and test set
training2 <- cars_edited_models$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
train2 <- cars_edited_models[training.samples,]
test2 <- cars_edited_models[-training.samples,]
View(train2)
View(training2)
View(training2)
# Make another train and test set
training2.samples <- cars_edited_models$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
train2.data <- cars_edited_models[training2.samples,]
test2.data <- cars_edited_models[-training2.samples,]
View(train2.data)
### Linear SVR
modelSVMLinCont <- train( price_usd ~
odometer_value
+ year_produced
+ number_of_photos
+ duration_listed
+ up_counter, data = train2.data, method = "svmLinear",
trControl = trainControl("cv", number =10),
preProcess = c("center", "scale"),
tuneLength = 10
)
summary(modelSVMLinCont)
modelSVMLinCont$bestTune
SVRPredictionLinCont <- predict(modelSVMLinCont, test.data)
rmse(test.data$price_usd, SVRPredictionLinCont)
R2(SVRPredictionLinCont,test.data$price_usd)
confusionMatrix(SVRPredictionLinCont$price_usd ,observed.price_usd, positive = "pos")
modelSVMLin <- train( price_usd ~ ., data = train2.data, method = "svmLinear",
trControl = trainControl("cv", number =10),
preProcess = c("center", "scale"),
tuneLength = 10
)
