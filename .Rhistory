#EDUCATION
#Variables that hold the male and female true and false values
totalMsum <- (ColEd$GENDER == "Male")
totalFeSum <- (ColEd$GENDER == "Female")
#variables that hold the total number of times male and female occurs
totalMsumCount <- sum(totalMsum)
totalFesumCount <- sum(totalFeSum)
#making a table with the number of Males, Females, and total
ColSunyTB <- rbind(Male = as.numeric(c(totalMsumCount)),
Female = as.numeric(c(totalFesumCount)),
Total =as.numeric( c(sum(totalMsum, totalFeSum))))
#Running chisquare test with our table as an input
chisq.test(ColSunyTB)
#ENGINEERING
#Variables that hold the male and female true and false values
totalMsum <- (ColEng$GENDER == "Male")
totalFeSum <- (ColEng$GENDER == "Female")
#variables that hold the total number of times male and female occurs
totalMsumCount <- sum(totalMsum)
totalFesumCount <- sum(totalFeSum)
#making a table with the number of Males, Females, and total
ColSunyTB <- rbind(Male = as.numeric(c(totalMsumCount)),
Female = as.numeric(c(totalFesumCount)),
Total =as.numeric( c(sum(totalMsum, totalFeSum))))
#Running chisquare test with our table as an input
chisq.test(ColSunyTB)
#Getting subsets of malefemale, and storing the acadlevel in different variables
ColFresh <- subset(malefemale, ACAD_LEVEL=="Feshmen")
ColSoph <- subset(malefemale, ACAD_LEVEL=="Sophomore")
ColJun <- subset(malefemale, ACAD_LEVEL=="Junior")
ColSen <- subset(malefemale, ACAD_LEVEL=="Senior")
View(ColSoph)
ACAD_LEVEL.aov < -(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <-(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <-(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <- (TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <- (TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <- (TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov <- aov(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=malefemale)
ACAD_LEVEL.aov
TukeyHSD(ACAD_LEVEL.aov)
View(ColSen)
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshmen"|"sophmore"|"Junior"|"Senior")
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshmen"|ACAD_LEVEL =="Sophmore"|ACAD_LEVEL =="Junior"|ACAD_LEVEL =="Senior")
View(ColFreshSophJunSen)
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshmen"|ACAD_LEVEL =="Sophmore"|ACAD_LEVEL =="Junior"|ACAD_LEVEL =="Senior")
#Compute one-way anova of Transaction amount by Acad level
ACAD_LEVEL.aov <- aov(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=ColFreshSophJunSen)
#Display results of AOV
ACAD_LEVEL.aov
#Perform Tukey Analysis
TukeyHSD(ACAD_LEVEL.aov)
View(ColFreshSophJunSen)
View(malefemale)
#Getting subsets of malefemale, Where Avad level is Freshman, Sophomore, Junior, or Senior
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshman"|ACAD_LEVEL =="Sophomore"|ACAD_LEVEL =="Junior"|ACAD_LEVEL =="Senior")
#Compute one-way anova of Transaction amount by Acad level
ACAD_LEVEL.aov <- aov(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=ColFreshSophJunSen)
#Display results of AOV
ACAD_LEVEL.aov
#Perform Tukey Analysis
TukeyHSD(ACAD_LEVEL.aov)
#Display results of AOV
ACAD_LEVEL.aov
#Display results of AOV
summary(ACAD_LEVEL.aov)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD ~ GENDER + AGE ~ GENDER, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD ~ GENDER + AGE ~ GENDER, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD + AGE ~ GENDER, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD ~ GENDER + AGE, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(GENDER ~ ACAD_LEVEL + AGE, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(ACAD_LOAD + AGE ~ GENDER, data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(GENDER ~ ACAD_LOAD + AGE , data=malefemale)
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(AGE ~ ACAD_LOAD + GENDER , data=malefemale)
summary(ACAD_LOAD.aov2)
#Perform Tukey Analysis
summary(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TUKEY(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TUKEYHSD(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TukeyHSD(ACAD_LOAD.aov2)
#Getting subsets of malefemale, Where Acad level is Freshman, Sophomore, Junior, or Senior
ColFreshSophJunSen <- subset(malefemale, ACAD_LEVEL =="Freshman"|ACAD_LEVEL =="Sophomore"|ACAD_LEVEL =="Junior"|ACAD_LEVEL =="Senior")
#Compute one-way anova of Transaction amount by Acad level
ACAD_LEVEL.aov <- aov(TRANSACTION_AMOUNT ~ ACAD_LEVEL, data=ColFreshSophJunSen)
#Display results of AOV
summary(ACAD_LEVEL.aov)
#Perform Tukey Analysis
TukeyHSD(ACAD_LEVEL.aov)
#Getting subsets of malefemale, Where Acad load is Enrolled Full-Time, Three Quarter Time, Enrolled Half-Time
ColACADLOAD <- subset(malefemale, ACAD_LOAD =="Enrolled Full-Time"|ACAD_LOAD =="Three Quarter Time"|ACAD_LOAD =="Enrolled Half-Time")
#Computer two-way avova of Acad Load and and Age by Gender
ACAD_LOAD.aov2 <- aov(AGE ~ ACAD_LOAD + GENDER , data=ColACADLOAD)
summary(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TukeyHSD(ACAD_LOAD.aov2)
#Computer two-way avova of Acad Load and Age on Gender
ACAD_LOAD.aov2 <- aov(GENDER ~ ACAD_LOAD + AGE , data=ColACADLOAD)
#Computer two-way avova of Acad Load and Age on Gender
ACAD_LOAD.aov2 <- aov(AGE ~ GENDER + ACAD_LOAD, data=ColACADLOAD)
summary(ACAD_LOAD.aov2)
#Perform Tukey Analysis
TukeyHSD(ACAD_LOAD.aov2)
# Clear plots
dev.off()
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")
#Import all the library's we are using
library(tidyverse)
library(e1071) #SVM
#Import all the library's we are using
library(tidyverse)
library(e1071) #SVM
library(car) #predict
library(Metrics) #rmse
library(caret) #partiiton
library(MASS) #stepwise
library(kernlab) #SVM
library(rpart) # Decision Tree Regression
library(randomForest) #  Random Forest Tree Regression
library(ranger) # RFT more than 53 factors
#Read our dataset into the cars variable
cars <- read_csv("cars.csv")
View(cars) #view the data
#Removing unnecessary columns from cars. Store that data in cars_edited
# -(19) is a column that shows the number of times a car has been upped. This column not descriptive and has been removed
# -(20:29) are boolean columns for various features. There is no description of what these features are and for that reason they have been omitted.
cars_edited <- cars %>% dplyr::select(-8 & -(12:13) & -(20:29))
View(cars_edited) #view the data
# Recode foreign language into their English meaning (engine_fuel)
cars_edited <- cars_edited %>% mutate(engine_fuel = dplyr::recode(engine_fuel,'gas' = "compressed natural gas"))
# Check the na's in the dataset
colSums(is.na(cars))
# Lets arbitrarily pick 999 to denote NA. (Engine-Capacity is categorical so this can be done)
cars_edited <-
cars_edited %>% mutate(engine_capacity = coalesce(engine_capacity, 999))
# Check for Duplicates and remove them
which(duplicated(cars_edited))
cars_edited <- cars_edited %>% distinct()
# View the changes the mutate made
View(cars_edited)
#Change model_name to factor. Useful later on for prediction modeling
str(cars_edited)
cars_edited$model_name <- as.factor(cars_edited$model_name)
cars_edited$engine_fuel <- as.factor(cars_edited$engine_fuel)
###################################################################################################
#
# Split Dataset into Training and Testing for our Models
#
set.seed(123)
training.samples <- cars_edited$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- cars_edited[training.samples,]
test.data <- cars_edited[-training.samples,]
View(train.data)
View(test.data)
# 1) Getting the unique entries for all columns and displaying how often they appear
ggplot(cars_edited, mapping = aes(y = manufacturer_name)) + geom_histogram(stat ="count") + geom_text(stat = "count", aes(label = after_stat(count)), hjust = -1)
# 2) A table to show unique car model names and how many there are
View(cars_edited %>% count(model_name))
# 3) Plotting the number of cars with automatic or mechanical transmissions
ggplot(cars_edited, mapping = aes(x = transmission)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 4) Plotting cars by color and how many there are
ggplot(cars_edited, mapping = aes(x = color)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 5) Box plot Odometer Value: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(odometer_value))
# 6) Histogram Odometer Value: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(odometer_value))
# 7) A table to show unique years produced for cars, and how many there are
View(cars_edited %>% count(year_produced))
# 8) Box plot year produced: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(year_produced))
# 9) Histogram Year produced: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(year_produced))
# 10) Graph to show what cars use what engine type (type of fuel)
ggplot(cars_edited, aes(x = engine_fuel), stat = "count") + geom_bar(mapping = aes(fill = engine_type))  + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 11) graph to show engine type (Electric, Diesel, Gasoline)
ggplot(cars_edited, aes(x = engine_type), stat = "count") + geom_bar()  + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 12) A table to show unique engine types and how many there are
View(cars_edited %>% count(engine_capacity))
# 13) Box plot Engine capacity: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(engine_capacity))
# 14) Bar graph Engine capacity: Graph to see how the data is skewed
ggplot(cars_edited) + geom_bar(mapping = aes(engine_capacity))
# 15) Bar graph Body type: count how many cars have the same body type
ggplot(cars_edited, mapping = aes(x = body_type), stat = "count") + geom_bar() + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
setwd("~/University at Brockport/Class Content/2021 - Spring/Data Analysis and Predictive Modeling/Project/Git")
#Read our dataset into the cars variable
cars <- read_csv("cars.csv")
View(cars) #view the data
#Removing unnecessary columns from cars. Store that data in cars_edited
# -(19) is a column that shows the number of times a car has been upped. This column not descriptive and has been removed
# -(20:29) are boolean columns for various features. There is no description of what these features are and for that reason they have been omitted.
cars_edited <- cars %>% dplyr::select(-8 & -(12:13) & -(20:29))
View(cars_edited) #view the data
# Recode foreign language into their English meaning (engine_fuel)
cars_edited <- cars_edited %>% mutate(engine_fuel = dplyr::recode(engine_fuel,'gas' = "compressed natural gas"))
# Check the na's in the dataset
colSums(is.na(cars))
# Lets arbitrarily pick 999 to denote NA. (Engine-Capacity is categorical so this can be done)
cars_edited <-
cars_edited %>% mutate(engine_capacity = coalesce(engine_capacity, 999))
# Check for Duplicates and remove them
which(duplicated(cars_edited))
cars_edited <- cars_edited %>% distinct()
# View the changes the mutate made
View(cars_edited)
#Change model_name to factor. Useful later on for prediction modeling
str(cars_edited)
cars_edited$model_name <- as.factor(cars_edited$model_name)
cars_edited$engine_fuel <- as.factor(cars_edited$engine_fuel)
###################################################################################################
#
# Split Dataset into Training and Testing for our Models
#
set.seed(123)
training.samples <- cars_edited$manufacturer_name %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- cars_edited[training.samples,]
test.data <- cars_edited[-training.samples,]
View(train.data)
View(test.data)
# 1) Getting the unique entries for all columns and displaying how often they appear
ggplot(cars_edited, mapping = aes(y = manufacturer_name)) + geom_histogram(stat ="count") + geom_text(stat = "count", aes(label = after_stat(count)), hjust = -1)
# 2) A table to show unique car model names and how many there are
View(cars_edited %>% count(model_name))
# 3) Plotting the number of cars with automatic or mechanical transmissions
ggplot(cars_edited, mapping = aes(x = transmission)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 4) Plotting cars by color and how many there are
ggplot(cars_edited, mapping = aes(x = color)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 5) Box plot Odometer Value: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(odometer_value))
# 6) Histogram Odometer Value: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(odometer_value))
# 7) A table to show unique years produced for cars, and how many there are
View(cars_edited %>% count(year_produced))
# 8) Box plot year produced: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(year_produced))
# 9) Histogram Year produced: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(year_produced))
# 10) Graph to show what cars use what engine type (type of fuel)
ggplot(cars_edited, aes(x = engine_fuel), stat = "count") + geom_bar(mapping = aes(fill = engine_type))  + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 11) graph to show engine type (Electric, Diesel, Gasoline)
ggplot(cars_edited, aes(x = engine_type), stat = "count") + geom_bar()  + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 12) A table to show unique engine types and how many there are
View(cars_edited %>% count(engine_capacity))
# 13) Box plot Engine capacity: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(engine_capacity))
# 14) Bar graph Engine capacity: Graph to see how the data is skewed
ggplot(cars_edited) + geom_bar(mapping = aes(engine_capacity))
# 15) Bar graph Body type: count how many cars have the same body type
ggplot(cars_edited, mapping = aes(x = body_type), stat = "count") + geom_bar() + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 16) Bar graph Drive train: How many cars have certain drive trains
ggplot(cars_edited, mapping = aes(x = drivetrain), stat = "count") + geom_bar() + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 17) Number of cars with same price
View(cars_edited %>% count(price_usd))
# 18) Box plot Price USD: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(price_usd))
# 19) Histogram Price USD: Check to see how skewed the data is
ggplot(cars_edited) + geom_histogram(mapping = aes(price_usd))
# 20) Bar graph Is exchangeable: Counting the number of cars that are exchangeable
ggplot(cars_edited, mapping = aes(x = is_exchangeable)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 21) Bar graph Location region: Count the number of cars in a region
ggplot(cars_edited, mapping = aes(x = location_region)) + geom_bar(stat = "count") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
# 22) View: posts with number of photos per car
View(cars_edited %>% count(number_of_photos))
# 23) Box plot Number of photos: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(number_of_photos))
# 24) Histogram Number of photos: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(number_of_photos))
# 25) View Up counter: The count unique up time for each car
View(cars_edited %>% count(up_counter))
# 26) Box plot Up counter: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(up_counter))
# 27) Histogram Up counter: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(up_counter))
# 28) View Duration listed: The count of unique Duration listed for each car
View(cars_edited %>% count(duration_listed))
# 29) Box plot Duration listed: investigating how our outliers look with our modifications
ggplot(cars_edited) + geom_boxplot(mapping = aes(duration_listed))
# 30) Histogram Duration listed: Graph to see how the data is skewed
ggplot(cars_edited) + geom_histogram(mapping = aes(duration_listed))
# 1) Graph to show the amount of cars(by manufacturer name) in a region BALLOON PLOT
ggplot(cars_edited, aes(location_region, manufacturer_name)) + geom_count()
# 2) Graph to show the price of a car according to its year produced SCATTER PLOT
ggplot(cars_edited, aes(year_produced, price_usd)) + geom_point() + geom_smooth()
#Group cars by manufacturer, and get it's mean price
cars_edited %>% group_by(manufacturer_name) %>% summarize(mean(price_usd)) %>% View()
# 3) Graph to show the amount of cars(density) according to it's price LINE GRAPH
ggplot(cars_edited, aes(price_usd, ..density..)) + geom_freqpoly(binwidth = 500)
# 5) Graph to show the price of a car according to it's millage(odometer) SCATTER PLOT
ggplot(cars_edited, aes(odometer_value, price_usd)) + geom_point(aes(color = is_exchangeable)) + geom_smooth()
# 4) Graph to show the number of cars in specific colors(10 red cars, 8 blue cars etc.) by region BAR GRAPH
ggplot(cars_edited, aes(color)) + geom_bar(aes(fill = location_region))
# 7) Graph to show the price of a car according to it's Odometer AND engine fuel SCATTER PLOT
ggplot(cars_edited, mapping = aes(x = odometer_value, y = price_usd)) + geom_point() + geom_smooth()
# 8) Graph to show the outliers with body type and price BOX PLOT
ggplot(cars_edited) + geom_boxplot(mapping = aes(x = reorder(body_type, price_usd), y =
price_usd))
# 6)Graph to show the price of a car according to it's year produced AND body type SCATTER PLOT
ggplot(cars_edited, aes(year_produced, price_usd)) + geom_point(aes(color = body_type)) + geom_smooth()
# 10 ) Graph to show the price of a car according to it's number of photos incl. engine fuel SCATTER PLOT
ggplot(cars_edited) + geom_point(mapping = aes(x = number_of_photos, y = price_usd, color = engine_fuel))
# Group by car body type and get it's mean price
group_by(cars_edited, body_type) %>% summarise(price_mean = mean(price_usd)) -> mean_cars
regionPriceDF_averages <- summarise(regionPriceDF, average_price_usd = mean(price_usd))
View(regionPriceDF_averages)
# 9) Graph to show the correlation between car body type, price, AND engine fuel
ggplot(cars_edited) + geom_point(mapping = aes(x = body_type, y = price_usd, color = engine_fuel))
#Aggregating the data of price to region to get the mean of prices
#per region
regionPriceDF <- group_by(cars_edited, location_region)
percentRegion <- paste0(round(100*regionPriceDF_averages$average_price_usd/sum(regionPriceDF_averages$average_price_usd), 2), "%")
pie(regionPriceDF_averages$average_price_usd, labels = percentRegion, main = "Region Price Distribution", col = rainbow(length(regionPriceDF_averages$average_price_usd)))
legend("right", c("Brest Region", "Gomel Region", "Grodno Region", "Minsk Region", "Mogilev Region", "Vitebsk Region"), cex = 0.8,
fill = rainbow(length(regionPriceDF_averages$average_price_usd)))
#one-way anova
group_by(regionPriceDF, regionPriceDF$location_region) %>%
summarise(
count = n(),
mean = mean(price_usd, na.rm = TRUE),
sd = sd(price_usd, na.rm = TRUE)
)
# Compute the analysis of variance
res.aov <- aov(regionPriceDF$price_usd ~ regionPriceDF$location_region,
data = regionPriceDF)
# Summary of the analysis
summary(res.aov)
#Mosaic Plot
mosaicplot(table(cars_edited$body_type, cars_edited$engine_type), shade=TRUE, las=2, main="Engine Type vs Body Type")
#Aov3
body_engine_type_on_price.aov3 <- aov(price_usd ~ engine_type * body_type, data = cars_edited)
summary(body_engine_type_on_price.aov3)
model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.aov3)
#summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
summary(linearHypothesis(body_engine_type_on_price.aov3, lincft = mcp))
#summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
linearHypothesis(body_engine_type_on_price.aov3, lincft = mcp)
#summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
linearHypothesis(body_engine_type_on_price.aov3)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.aov3)
#summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
linearHypothesis(body_engine_type_on_price.aov3)
#summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
linearHypothesis(body_engine_type_on_price.aov3, singular.ok=true)
#summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
linearHypothesis(body_engine_type_on_price.aov3, singular.ok=TRUE)
#General Linear Hypothesis
library(multcomp) #glht #This will break other things so reload R after running this.
summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
#Mosaic Plot
mosaicplot(table(cars_edited$body_type, cars_edited$engine_type), shade=TRUE, las=2, main="Engine Type vs Body Type")
#Aov3
body_engine_type_on_price.aov3 <- aov(price_usd ~ engine_type * body_type, data = cars_edited)
summary(body_engine_type_on_price.aov3)
model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.aov3)
#General Linear Hypothesis
library(multcomp) #glht #This will break other things so reload R after running this.
summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
summary(glht(body_engine_type_on_price.aov3, lincft = mcp(price="Tukey")))
glht(body_engine_type_on_price.aov3, lincft = mcp(price="Tukey"))
#Aov3
body_engine_type_on_price.aov3 <- aov(price_usd ~ engine_type + body_type, data = cars_edited)
summary(body_engine_type_on_price.aov3)
model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.aov3)
#General Linear Hypothesis
library(multcomp) #glht #This will break other things so reload R after running this.
summary(glht(body_engine_type_on_price.aov3, lincft = mcp(price="Tukey")))
#Homogeneity of variances
plot(body_engine_type_on_price.aov3, 1)
#Levene Test
leveneTest(price_usd ~ engine_type + body_type, data=cars_edited)
#Levene Test
leveneTest(engine_type ~ body_type*price_usd, data=cars_edited)
#Levene Test
leveneTest(price_usd ~ engine_type*body_type, data=cars_edited)
#Aov3
body_engine_type_on_price.aov3 <- aov(price_usd ~ engine_type*body_type, data = cars_edited)
summary(body_engine_type_on_price.aov3)
model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.aov3)
#General Linear Hypothesis
library(multcomp) #glht #This will break other things so reload R after running this.
summary(glht(body_engine_type_on_price.aov3, lincft = mcp(price="Tukey")))
#Homogeneity of variances
plot(body_engine_type_on_price.aov3, 1)
#Levene Test
leveneTest(price_usd ~ engine_type*body_type, data=cars_edited)
summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
#Mosaic Plot
mosaicplot(table(cars_edited$body_type, cars_edited$engine_type), shade=TRUE, las=2, main="Engine Type vs Body Type")
#Aov3
body_engine_type_on_price.aov3 <- aov(price_usd ~ engine_type*body_type, data = cars_edited)
summary(body_engine_type_on_price.aov3)
model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE)
summary(model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE))
model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.aov3)
#Tukey HSD
summary(TukeyHSD(body_engine_type_on_price.aov3))
#General Linear Hypothesis
library(multcomp) #glht #This will break other things so reload R after running this.
summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
#Levene Test
leveneTest(price_usd ~ engine_type*body_type, data=cars_edited)
#normality
plot(body_engine_type_on_price.aov3, 2)
# Extract the residuals
body_engine_type_on_price.aov3.residuals <- residuals(object=plot(body_engine_type_on_price.aov3 )
)
# Run Shapiro-Wilk test
shapiro.test(x = body_engine_type_on_price.aov3.residuals)
# Extract the residuals
body_engine_type_on_price.aov3.residuals <- residuals(object=body_engine_type_on_price.aov3)
# Run Shapiro-Wilk test
shapiro.test(x = body_engine_type_on_price.aov3.residuals)
# Run Shapiro-Wilk test
shapiro.test(x = body_engine_type_on_price.aov3.residuals)
# Run Shapiro-Wilk test
shapiro.test(x = body_engine_type_on_price.aov3.residuals)
#Kruskal-Wallis test
kruskal.test(engine_type ~ body_type, data=cars_edited)
#Multiple pairwise-comparison between groups
pairwise.wilcox.test(cars_edited$engine_type, cars_edited$body_type, p.adjust.method="BH")
ggboxplot()
#Compute logistic regression
body_engine_type_on_price.model <- glm( $price ~., data = train.data, family=binomial)
#Compute logistic regression
body_engine_type_on_price.model <- glm(price_usd ~., data = train.data, family=binomial)
#General Linear Hypothesis
library(multcomp) #glht #This will break other things so reload R after running this.
summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
#Levene Test
leveneTest(price_usd ~ engine_type+body_type, data=cars_edited)
#Levene Test
leveneTest(price_usd ~ engine_type*body_type, data=cars_edited)
#Aov3
body_engine_type_on_price.aov3 <- aov(price_usd ~ engine_type+body_type, data = cars_edited)
summary(body_engine_type_on_price.aov3)
model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.aov3)
#General Linear Hypothesis
library(multcomp) #glht #This will break other things so reload R after running this.
summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
#Homogeneity of variances
plot(body_engine_type_on_price.aov3, 1)
#Levene Test
leveneTest(price_usd ~ engine_type*body_type, data=cars_edited)
#normality
plot(body_engine_type_on_price.aov3, 2)
#Compute logistic regression
body_engine_type_on_price.model <- glm(price_usd ~., data = train.data, family=binomial)
#Mosaic Plot
mosaicplot(table(cars_edited$body_type, cars_edited$engine_type), shade=TRUE, las=2, main="Engine Type vs Body Type")
#Aov3
body_engine_type_on_price.aov3 <- aov(price_usd ~ engine_type*body_type, data = cars_edited)
summary(body_engine_type_on_price.aov3)
model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.aov3)
#General Linear Hypothesis
library(multcomp) #glht #This will break other things so reload R after running this.
summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
#Mosaic Plot
mosaicplot(table(cars_edited$body_type, cars_edited$engine_type), shade=TRUE, las=2, main="Engine Type vs Body Type")
#Aov3
body_engine_type_on_price.aov3 <- aov(price_usd ~ engine_type+body_type, data = cars_edited)
summary(body_engine_type_on_price.aov3)
model.tables(body_engine_type_on_price.aov3, type="means", se = TRUE)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.aov3)
#General Linear Hypothesis
library(multcomp) #glht #This will break other things so reload R after running this.
summary(glht(body_engine_type_on_price.aov3, lincft = mcp))
#Homogeneity of variances
plot(body_engine_type_on_price.aov3, 1)
#Levene Test
leveneTest(price_usd ~ engine_type*body_type, data=cars_edited)
#normality
plot(body_engine_type_on_price.aov3, 2)
#Aov3 this time using cross *
body_engine_type_on_price.cross.aov3 <- aov(price_usd ~ engine_type*body_type, data = cars_edited)
summary(body_engine_type_on_price.cross.aov3)
#Aov3 this time using cross *
body_engine_type_on_price.cross.aov3 <- aov(price_usd ~ engine_type*body_type, data = cars_edited)
summary(body_engine_type_on_price.cross.aov3)
model.tables(body_engine_type_on_price.cross.aov3, type="means", se = TRUE)
#Tukey HSD
TukeyHSD(body_engine_type_on_price.cross.aov3)
